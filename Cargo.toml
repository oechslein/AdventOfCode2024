[workspace]
resolver = "2"

members = ["day*", "grid", "utils", "range_set"]
default-members = ["day*", "grid", "utils"]

[workspace.dependencies]
# glam is a simple and fast linear algebra library for games and graphics. Features. f32 types. vectors: Vec2, Vec3, Vec3A and Vec4
glam = "0.29"

# nom is a parser combinator library with a focus on safe parsing, streaming patterns, and as much as possible zero copy.
nom = "7.1"

# Graph data structure library. Provides graph types and graph algorithms.
petgraph = "0.6"

#  fast, non-secure, hashing algorithm derived from an internal hasher used in FireFox and Rustc.
fxhash = "0.2"

# Pathfinding, flow, and graph algorithms
pathfinding = "4.4"

# image processing
image = "0.25"
#  GIF de- and encoder
gif = "0.13"

# This crate provides routines for searching strings for matches of a regular expression (aka “regex”)
regex = "1.11"
# With lazy-regex macros, regular expressions
lazy-regex = "3.1"

# Simple package to count generic iterables
counter = "0.6"

# Addresses memory by bits, for packed collections and bitfields
bitvec = "1.0"

# A fixed sized two-dimensional array
#array2d = "0.3"

# Numeric traits for generic mathematics (e.g. safe conversions)
num-traits = "0.2"

# A collection of numeric types and traits for Rust: num-bigint, num-complex, num-integer,num-iter, num-rational, num-traits, (num-derive)
num = "0.4"

# Generic interval and interval set library.
intervallum = "1.4"
# Wrappers of the standard collection library for generic programming.
gcollections = "1.5"

# A set of non-overlapping ranges, backed by SmallVec<T>
range-collections = "0.4"
#Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations. This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer.
smallvec = "1.13"

# indicatif is a library for Rust that helps you build command line interfaces that report progress to users. It comes with various tools and utilities for formatting anything that indicates progress.
indicatif = { version = "0.17", features = ["rayon"] }

# A simple and generic library for vector math.
vecmath = "1"

# A low-dimensional linear algebra library, targeted at computer graphics.
cgmath = "0.18"

# A pure-Rust hash table which preserves (in a limited sense) insertion order.
indexmap = "2.1"

# A Rust library for creating Parallel Splitting Iterators for Rayon (e.g. DFS or BFS)
spliter = "0.1"

# DashMap is an implementation of a concurrent associative array/hashmap in Rust.
dashmap = {version ="6.1.0", features = ["rayon", "inline"]}

############################################################################################################################################################

# Extra iterator adaptors, iterator methods, free functions, and macros.
itertools = "0.13"

# Data-parallelism library that makes it easy to convert sequential computations into parallel
rayon = "1.10"

# Caching structures and simplified function memoization
cached = "0.54"

# A macro for declaring lazily evaluated statics in Rust. (use first https://doc.rust-lang.org/std/cell/struct.OnceCell.html)
lazy_static = "1.5"
# Fancy diagnostic reporting library and protocol for us mere mortals who aren't compiler hackers.

miette = { version = "7.4", features = ["fancy"] }
# derive(Error)
thiserror = "2.0"

derive_builder = "0.20"
derive_more = { version = "1.0", features = ["full"] }

# This crate provides derive macro Display and FromStr. These macros use common helper attributes to specify the format.
parse-display = "0.10"

############################################################################################################################################################
#  A scoped, structured logging and diagnostics system.
tracing = "0.1"
# Utilities for implementing and composing tracing subscribers.
tracing-subscriber = "0.3"
# Inspect tracing-enabled Rust applications with Tracy
tracing-tracy = "0.11"

# This crate will help you to write simpler tests by leveraging a software testing concept called test fixtures. A fixture is something that you can use in your tests to encapsulate a test’s dependencies.
rstest = "0.23"
# This crate give a way to define a tests set and apply them to every case you need to test.
rstest_reuse = "0.7"

# Fast & Simple Benchmarking for Rust
divan = "0.1"
# Statistics-driven micro-benchmarking library
#criterion = { version = "0.5", features = ["html_reports"] }

tracy-client = "0.17"
tracy-client-sys = "0.24"

dhat = "0.3"

[profile.flamegraph]
inherits = "release"
debug = true

[profile.dhat]
inherits = "release"
debug = 1

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1
panic = "abort"

[profile.release]
codegen-units = 1
lto = "fat"
## defaults below
opt-level = 3
debug = false
#split-debuginfo = '...'  # Platform-specific.
debug-assertions = false
overflow-checks = false
#lto = false
panic = 'unwind'
incremental = false
#codegen-units = 16
rpath = false
